# Copyright 2022 VÃ­ctor Mayoral-Vilches. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Access to this exploit and the use of information, materials (or portions
# thereof), is not intended, and is prohibited, where such access or use
# violates applicable laws or regulations.  By no means the authors
# encourage or promote the unauthorized tampering with running
# systems. This can cause serious human harm and material damages.

import nmap3
from exploitflow.killchain.reconnaissance import ReconnaissanceExploit
import exploitflow.state as state


class VersionExploit(ReconnaissanceExploit):
    """
    Scan for versions in a given port-range
    """

    def __init__(self, port_range=None, name="VersionExploit"):
        super(VersionExploit, self).__init__(name)
        self.nmap = nmap3.Nmap()

    def _forward(self, state, target, debug=False) -> state.State:
        self.pre_state = state

        # execute the exploit
        version_result = self.nmap.nmap_version_detection(
            target
        )  # not working, rework it out
        print(version_result)

        self.post_state = self.pre_state
        self.debug(debug)
        return self.post_state
