# Copyright 2022 VÃ­ctor Mayoral-Vilches. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Inspired by https://github.com/tobegit3hub/miniflow

from . import exploit
from . import graph
from .state import State_default
from wasabi import color


class Flow(object):
    """
    The exploit flow.

    Stores state transitions in the graph attribute.
    """

    def __init__(self, state_class=State_default, model=None):
        """[summary]

        Parameters
        ----------
        state_class : State class type, optional
            Stores the data representation class int he flow and its graph, by default State_default
        model : [type], optional
        """
        self.state_class = state_class
        self._graph = graph.get_default_graph(self.state_class)

    def __enter__(self):
        """Support with statement."""
        return self

    def __str__(self):
        """Returns the string representation of the flow"""
        return color("Final reward: ", fg="black", bg="grey", bold=True) + \
            color(" " + str(self.reward()) + " ", fg="white", bg="red", bold=True) + "\n" + \
            color("Final state: ", fg="black", bg="grey", bold=True) + \
            color(" " + str(self.state()) + " ", fg="white", bg="yellow", bold=True)

    def __exit__(self, type, value, trace):
        pass

    def plot(self):
        self._graph.plot()

    def ascii(self):
        return self._graph.ascii()
    
    def reward(self):
        """Returns the current reward of the graph"""
        return self._graph.reward

    def set_learning_model(self, model):
        """Sets the learning model of the graph"""
        self._graph.learning_model = model

    def get_learning_model(self):
        """Returns the learning model of the graph"""
        return self._graph.learning_model

    def set_state(self, state):
        """Sets the state of the graph
        
            NOTE: unlikely to be used, as the state is set 
            by the learning model and the exploit flow
        """
        self._graph.state = state

    def state(self):
        """Returns the current state of the graph"""
        return self._graph.state
    
    def last_state(self):
        """Returns the last state of the graph"""
        return self._graph.last_state
    
    def last_action(self):
        """Returns the last action of the graph"""
        return self._graph.last_action
    
    def last_reward(self):
        """Returns the last reward of the graph"""
        return self._graph.last_reward
    
    def reset(self):
        """Resets the current flow"""
        self._graph.reward = 0             # stores overall computed reward
        self._graph.state = None           # stores current state
        self._graph.last_state = None      # stores the last state, before the last_action and 
                                    #  before receiving last_reward
        self._graph.last_action = None     # stores the last action
        self._graph.last_reward = None     # stores the last action

    def to_dot(self, dotfile_path="/tmp/exploitflow.dot"):
        self._graph.to_dot(dotfile_path)

    def run(self, expl, feed_dict=None, options=None, debug=False, target="127.0.0.1"):
        """Update the value of PlaceholerExploit with feed_dict data"""

        # sanitize input, consider that State might've been passed
        expl = exploit.StateExploit(expl) if not isinstance(expl, exploit.Exploit) else expl
        name_op_map = expl._graph.get_name_op_map()

        # # add a connection from previous states to the new expl
        # if expl:
        #     self._graph.add_edge(self.state(), expl, label="run")  # edge between ops

        if feed_dict != None:
            # Example: "Placeholder_1": 10} or {PlaceholderOp: 10}
            for op_or_opname, value in feed_dict.items():
                if isinstance(op_or_opname, str):
                    placeholder_op = name_op_map[op_or_opname]
                else:
                    placeholder_op = op_or_opname

                if isinstance(placeholder_op, exploit.PlaceholderExploit):
                    placeholder_op.set_value(value)

        return expl.forward(None, target, debug=debug)
