# Copyright 2022 VÃ­ctor Mayoral-Vilches. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# A simple file abstracting silly learning models for the sake of testing
# and experimentation.

import random
from wasabi import color

# A utility function to format floating point numbers. Not
# directly related to Q-learning.
def ff(f, n):
    """Format a floating point number to a string with n digits."""
    fs = '{:f}'.format(f)
    if len(fs) < n:
        return ('{:'+n+'s}').format(fs)
    else:
        return fs[:n]


class QLearn:
    """Q-Learning class. Implements the Q-Learning algorithm."""

    def __init__(self,
                 actions,
                 epsilon=0.1,
                 alpha=0.2,
                 gamma=0.9):
        """Initialize an empty dictionary for Q-Values.
        
            params:
                actions: list of actions available in the environment
                epsilon: exploration factor
                alpha: learning rate
                gamma: discount factor
        """
        # Q-Values are stored in a dictionary, with the state-action
        self.q = {}

        # Epsilon is the exploration factor. A higher epsilon
        # encourages more exploration, risking more but potentially
        # gaining more too.
        self.epsilon = epsilon

        # Alpha is the learning rate. If Alpha is high, then the
        # learning is faster but may not converge. If Alpha is low,
        # the learning is slower but convergence may be more stable.
        self.alpha = alpha

        # Gamma is the discount factor.
        # It prioritizes present rewards over future ones.
        self.gamma = gamma

        # Actions available in the environment
        self.actions = actions

    def getQ(self, state, action):
        """Get Q value for a state-action pair.

        If the state-action pair is not found in the dictionary,
            return 0.0 if not found in our dictionary
        """
        return self.q.get((state, action), 0.0)

    def learnQ(self, state, action, reward, value, debug=False):
        """Updates the Q-value for a state-action pair.

        The core Q-Learning update rule.
            Q(s, a) += alpha * (reward(s,a) + max(Q(s')) - Q(s,a))

        This function updates the Q-value for a state-action pair
        based on the reward and maximum estimated future reward.
        """
        oldv = self.q.get((state, action), None)
        if oldv is None:
            if debug:
                print(color("WARNING: Adding new Q-value for " + str(action)  + " with state: " + str(state), fg="black", bg="yellow", bold=True))

            # If no previous Q-Value exists, then initialize
            # it with the current reward
            self.q[(state, action)] = reward
        else:
            # Update the Q-Value with the weighted sum of old
            # value and the newly found value.
            #
            # Alpha determines how much importance we give to the
            # new value compared to the old value.
            self.q[(state, action)] = oldv + self.alpha * (value - oldv)
            
            if debug:
                print(color("SUCESS: Reusing Q-value for " + str(action) + " with state: " + str(state), fg="black", bg="green", bold=True))

    # def chooseAction(self, state):
    #     """Epsilon-Greedy approach for action selection."""
    #     if random.random() < self.epsilon:
    #         # With probability epsilon, we select a random action
    #         action = random.choice(self.actions)
    #     else:
    #         # With probability 1-epsilon, we select the action
    #         # with the highest Q-value
    #         q = [self.getQ(state, a) for a in self.actions]
    #         maxQ = max(q)
    #         count = q.count(maxQ)
    #         # If there are multiple actions with the same Q-Value,
    #         # then choose randomly among them
    #         if count > 1:
    #             best = [i for i in range(len(self.actions)) if q[i] == maxQ]
    #             i = random.choice(best)
    #         else:
    #             i = q.index(maxQ)

    #         action = self.actions[i]
    #     return action

    def chooseAction(self, state, return_q=False):
        """An alternative approach for action selection."""
        # Compute the Q values for each action given the current state
        q = [self.getQ(state, a) for a in self.actions]
        maxQ = max(q)

        # With a probability of epsilon, add random values 
        # to all the actions to introduce some noise and 
        # encourage exploration.
        if random.random() < self.epsilon:
            minQ = min(q)
            mag = max(abs(minQ), abs(maxQ))  # Determine the magnitude 
                                             # range based on minQ and maxQ

            # For each action, add a random value in the range of [-0.5 * mag, 0.5 * mag].
            # This modifies the Q-values in a way that promotes exploration
            q = [q[i] + random.random() * mag - .5 * mag for i in range(len(self.actions))]
            
            # Recalculate the maximum Q value after adding the random values
            maxQ = max(q)

        # Determine how many actions have the maximum Q value
        count = q.count(maxQ)

        # If there are multiple actions with the same Q-value (maxQ),
        # choose an action randomly from those actions. This ensures 
        # diversity in action selection when there are ties for the max Q-value.
        if count > 1:
            best = [i for i in range(len(self.actions)) if q[i] == maxQ]
            i = random.choice(best)
        else:
            # If only one action has the max Q-value, select that action.
            i = q.index(maxQ)

        # Get the action associated with the maximum Q-value
        action = self.actions[i]

        # If return_q is True, return both the selected action and the list of Q-values.
        # This can be useful for debugging and observing how Q-values change over time.
        if return_q:
            return action, q

        # If return_q is False, just return the selected action
        return action

    def learn(self, state1, action1, reward, state2, debug=False):
        """Get the maximum Q-Value for the next state."""
        maxqnew = max([self.getQ(state2, a) for a in self.actions])

        # Learn the Q-Value based on current reward and future
        # expected rewards.
        self.learnQ(state1, action1, reward, reward + self.gamma * maxqnew, debug=debug)

        if debug:
            # debug the arguments used for the learning, use colors to hightlight each part
            debug_str = ""
            debug_str += color("state: " + str(state1), fg="white", bg="blue", bold=True) + ", "
            debug_str += color("action: " + str(action1), fg="white", bg="black", bold=True) + ", "
            debug_str += color("reward: " + str(reward), fg="white", bg="red", bold=True) + ", "
            debug_str += color("next state: " + str(state2), fg="white", bg="yellow", bold=True)
            print(debug_str)
