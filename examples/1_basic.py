# A exploit flow that combines various
# basic operations over trivial exploits
# (Constant, Bool), etc.
#
# Aims to demonstrate composition of exploits.
#
# ┌────────────┐  []   ┌────────────┐
# │ Constant_1 │ ◀──── │    Init    │
# └────────────┘       └────────────┘
#   │                    │
#   │ [3]                │ []
#   ▼                    ▼
# ┌────────────┐       ┌────────────┐
# │   Mul_1    │       │  Constant  │
# └────────────┘       └────────────┘
#   │                    │
#   │                    │ [1]
#   │                    ▼
#   │                  ┌────────────┐
#   │                  │    Mul     │
#   │                  └────────────┘
#   │                    │
#   │                    │ [1]
#   │                    ▼
#   │                  ┌────────────┐
#   │                  │ Constant_0 │
#   │                  └────────────┘
#   │                    │
#   │                    │ [1, 2]
#   │                    ▼
#   │                  ┌────────────┐
#   │                  │   Mul_0    │
#   │                  └────────────┘
#   │                    │
#   │                    │
#   │                    ▼
#   │                  ┌────────────┐
#   └────────────────▶ │    Add     │
#                      └────────────┘
#                        │
#                        │ [1, 2, 3]
#                        ▼
#                      ┌────────────┐
#                      │    Bool    │
#                      └────────────┘
#                        │
#                        │ [1, 2, 3]
#                        ▼
#                      ┌────────────┐
#                      │   Mul_2    │
#                      └────────────┘


import exploitflow as ef
from exploitflow.state import State_v0

flow = ef.Flow(State_v0)  # use basic data model
init = ef.Init()

c = ef.Constant(1)
d = ef.Constant(2)
e = ef.Constant(3)
f = ef.Boolean(False)

print(flow.run(((init * c * d) + (init * e)) * f, debug=True, target="127.0.0.1"))
print(flow.ascii())
